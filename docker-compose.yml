
version: "3.9"

services:
  postgres:
    image: postgres:17
    container_name: postgres17
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  web:
    build: fill_data_webapp
    container_name: fastapi_app
    env_file:
      - .env
    ports:
      - "8005:8005"
    depends_on:
      - postgres
    volumes:
      - ./fill_data_webapp:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8005 --reload

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/queries/custom_queries.yaml"
    volumes:
      - ./postgres_exporter/queries/custom_queries.yaml:/queries/custom_queries.yaml:ro
    depends_on:
      - postgres
    ports:
      - "9187:9187"

  pg-exporter:
    image: andriik/postgres-performance-insights-exporter
    container_name: pg-exporter
    restart: unless-stopped
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: postgres
      DB_PORT: 5432
    depends_on:
      - postgres
    ports:
      - "9153:9153"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - postgres_exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${POSTGRES_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki/config.yaml:/etc/loki/loki-config.yaml:ro
      - loki_data:/loki

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail/config.yaml:/etc/promtail/config.yaml:ro
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki

  pgbench:
    image: postgres:17
    container_name: pgbench
    entrypoint: ["tail", "-f", "/dev/null"]
    depends_on:
      - postgres
    env_file:
      - .env


volumes:
  postgres_data:
  grafana_data:
  loki_data:

